{
	"info": {
		"_postman_id": "0ab18cef-9db3-44df-92fa-bb5359579cb2",
		"name": "REST API basics: CRUD, test & variable Copy",
		"description": "## **Objetivo**\n\nEssa API foi criado com objetivo de auxiliar estudantes há fazer uma lista das materias que eles precisam estudar, com funções de criar dados, atualizar eles e até excluir\n\n## Configuração e Execução\n\n### Backend\n\n1. cd backend\n    \n2. npm install\n    \n3. npm run start\n    \n    Inicie o servidor NestJS:\n    \n    O backend rodará em `http://localhost:3000`.\n    \n\n## Funcionalidades\n\n- **Criar Tarefas:** Adicione tarefas especificando nome, disciplina/assunto e prioridade.\n    \n- **Editar e Atualizar Tarefas:** Marque tarefas como concluídas ou atualize outros dados.\n    \n- **Filtrar Tarefas:** Filtre por nome ou prioridade (baixo, médio, alto).\n    \n- **Remover Tarefas: remove uma tarefa**\n    \n\n## Estrutura do Projeto\n\n  \nproject-root/  \n├── backend/  \n│ ├── src/  \n│ │ ├── tasks/  \n│ │ │ ├── dto/  \n│ │ │ │ ├── create-task.dto.ts  \n│ │ │ │ └── update-task.dto.ts  \n│ │ │ ├── entities/  \n│ │ │ │ └── task.entity.ts  \n│ │ │ ├── tasks.controller.ts  \n│ │ │ ├── tasks.service.ts  \n│ │ │ └── tasks.module.ts  \n│ │ ├── app.module.ts  \n│ │ └── main.ts  \n│ └── package.json  \n└── frontend/  \n├── src/  \n│ ├── components/  \n│ │ ├── TaskForm.jsx  \n│ │ ├── TaskList.jsx  \n│ │ ├── ProgressBar.jsx  \n│ │ └── ProgressBar.css  \n│ ├── App.js  \n│ └── index.js  \n└── package.json",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "38487986"
	},
	"item": [
		{
			"name": "Listar Todas as Tarefas",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/tasks",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"tasks"
					]
				},
				"description": "- **Método:** GET\n    \n- **URL:** `http://localhost:3000/tasks`\n    \n- **Descrição:** Mostra todos os dados cadastrados"
			},
			"response": []
		},
		{
			"name": "Criar uma Tarefa",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"Estudar Matemática\",\n  \"subject\": \"Matemática\",\n  \"priority\": \"alto\"\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/tasks",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"tasks"
					]
				},
				"description": "- { \"name\": \"Estudar React\", \"subject\": \"Front-end\", \"priority\": \"alto\"}\n    \n- **Descrição:** Cria uma nova tarefa com status `completed` como `false` por padrão. Ao criar, a tarefa recebe uma animação de entrada."
			},
			"response": []
		},
		{
			"name": "atualizardados",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful PUT request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"id\": 1,\n    \"name\": \"Estudar Matemática\",\n    \"subject\": \"Matemática\",\n    \"priority\": \"alto\",\n    \"completed\": true\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/tasks/1",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"tasks",
						"1"
					]
				},
				"description": "- **Método:** PUT\n    \n- **URL:** `http://localhost:3000/tasks/{id}`\n    \n- **Body (JSON):**  \n    \\`\\`\\`json  \n    {  \n    \"completed\": true  \n    }\n    \n- **Descrição:** atualiza dados, como nome, materia e se ele foi feito ou não"
			},
			"response": []
		},
		{
			"name": "Delete data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful DELETE request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/tasks/1",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"tasks",
						"1"
					]
				},
				"description": "- **Método:** DELETE\n    \n- **URL:** `http://localhost:3000/tasks/{id}`\n    \n- **Descrição:** Remove uma tarefa"
			},
			"response": []
		},
		{
			"name": "pegar dado com filtro",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/tasks?priority=alto",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"tasks"
					],
					"query": [
						{
							"key": "filter",
							"value": "1",
							"disabled": true
						},
						{
							"key": "priority",
							"value": "alto"
						}
					]
				},
				"description": "- **Método:** GET\n    \n- **URL:** `http://localhost:3000/tasks`\n    \n    - `filter`: Filtra tarefas pelo nome.\n        \n    - `priority`: Filtra tarefas pela prioridade (\"baixo\", \"medio\", \"alto\")."
			},
			"response": []
		},
		{
			"name": "pegar dado com ID",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/tasks/2",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"tasks",
						"2"
					]
				},
				"description": "- **Método:** GET\n    \n- **URL:** `http://localhost:3000/tasks/{id}`\n    \n- **Descrição:** Filtra tarefa pelo ID selecionado"
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "id",
			"value": "1"
		},
		{
			"key": "base_url",
			"value": "https://postman-rest-api-learner.glitch.me/"
		}
	]
}
